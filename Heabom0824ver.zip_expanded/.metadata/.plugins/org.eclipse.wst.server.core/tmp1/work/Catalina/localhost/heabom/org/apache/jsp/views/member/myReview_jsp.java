/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.78
 * Generated at: 2023-09-03 07:29:02 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.views.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.heabom.member.model.vo.ReviewReply;
import java.util.ArrayList;

public final class myReview_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.heabom.member.model.vo.ReviewReply");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	ArrayList<ReviewReply> relist = (ArrayList<ReviewReply>)request.getAttribute("relist");
	String reContextPaht = request.getContextPath();


      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>Document</title>\r\n");
      out.write("    <style>\r\n");
      out.write("        .yj_myReview_area{\r\n");
      out.write("        border: 0px solid;\r\n");
      out.write("        height: auto;\r\n");
      out.write("        width: 532px;\r\n");
      out.write("        margin: auto;\r\n");
      out.write("        margin-top: 10px;\r\n");
      out.write("        margin-left: 817px;\r\n");
      out.write("        background-color: white;\r\n");
      out.write("        padding: 20px;\r\n");
      out.write("        border-radius: 20px;\r\n");
      out.write("            }\r\n");
      out.write("        .yj_myReview_detail{\r\n");
      out.write("            height: auto;\r\n");
      out.write("            width: auto;\r\n");
      out.write("            border: 1px solid lightgray;\r\n");
      out.write("            padding: 10px;\r\n");
      out.write("            margin-bottom: 5px;\r\n");
      out.write("        }\r\n");
      out.write("        .yj_myReview_detail img{\r\n");
      out.write("            height: 100%;\r\n");
      out.write("            width: 100%;\r\n");
      out.write("        }\r\n");
      out.write("    \r\n");
      out.write("        .text_limit {\r\n");
      out.write("            width: 300px;\r\n");
      out.write("            white-space: nowrap;\r\n");
      out.write("            overflow: hidden;\r\n");
      out.write("            text-overflow: ellipsis;  /* 말줄임 적용 */\r\n");
      out.write("            font-size: larger;\r\n");
      out.write("        }\r\n");
      out.write("        .detail_tb div, .detail_tb img{\r\n");
      out.write("            cursor: pointer;\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("    <div class=\"yj_myReview_area\" align=\"cneter\">\r\n");
      out.write("        ");
 if(relist.isEmpty()) { 
      out.write("\r\n");
      out.write("            <div class=\"text_limit\" style=\"font-size: small;\">내 글에 리뷰 및 댓글이 없습니다.</div>\r\n");
      out.write("        ");
 } else { 
      out.write("\r\n");
      out.write("        ");
 for(ReviewReply re : relist) { 
      out.write("\r\n");
      out.write("            <div class=\"yj_myReview_detail\">\r\n");
      out.write("                <table border=\"0\" class=\"detail_tb\">\r\n");
      out.write("                    <tr>\r\n");
      out.write("                        <td height=\"80\" width=\"80\">\r\n");
      out.write("                        ");
 if(re.getImgPath().length() < 5) { 
      out.write("\r\n");
      out.write("                            <img src=\"");
      out.print(reContextPaht );
      out.write("/resource/img/profile/기본이미지.png\" alt=\"\" style=\"width: 70%; height: 70%; border-radius: 50px;\">\r\n");
      out.write("                        ");
 } else { 
      out.write("\r\n");
      out.write("                        	<img src=\"");
      out.print(reContextPaht );
      out.print(re.getImgPath() );
      out.write("\" alt=\"\" style=\"width: 70%; height: 70%; border-radius: 50px;\">\r\n");
      out.write("                        ");
 } 
      out.write("\r\n");
      out.write("                        </td>\r\n");
      out.write("                        <td width=\"3\"></td>\r\n");
      out.write("                        <td width=\"250\">\r\n");
      out.write("                            <div style=\"font-size: medium; margin-bottom: 5px;\"><strong>");
      out.print(re.getNickname() );
      out.write("님께서</strong>\r\n");
      out.write("                                ");
 if(re.getReNo().substring(0,2).equals("RV")) { 
      out.write("\r\n");
      out.write("                                	내 게시물에 리뷰를 작성하였습니다.</div>\r\n");
      out.write("                                ");
 } else { 
      out.write("\r\n");
      out.write("                                	내 게시물에 리플을 작성하였습니다.</div>\r\n");
      out.write("                                ");
 } 
      out.write("\r\n");
      out.write("                            <div class=\"text_limit\" style=\"font-size: medium;\">");
      out.print(re.getReContent() );
      out.write("</div>\r\n");
      out.write("                        </td>\r\n");
      out.write("                    </tr>\r\n");
      out.write("                </table>\r\n");
      out.write("            </div>\r\n");
      out.write("        ");
 } 
      out.write("\r\n");
      out.write("        ");
 } 
      out.write("\r\n");
      out.write("    </div>\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
